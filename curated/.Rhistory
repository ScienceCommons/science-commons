text(.9,21.5, "Replication outcome", pos=4)
#dev.off()
par(mar=c(4,4,1,2))
par(cex=1.25, font=1)
### set up forest plot (rows argument used to specify exactly in which rows outcomes will be plotted)
forest(dat$yi, dat$vi, xlim=c(-1.2,1.8), at=c(-.3,-.2,-.1,0,.1,.2,.3,.4,.5,.6,.7,.8,.9),
cex=1.25, ylim=c(12, 23), rows=c(20.25, 19:14), annotate=FALSE, cex.axis=1,
xlab="Effect size (r) [95% CI]", psize=1.25, pch=dat$study.symbol, steps=5)
op <- par(cex=1.25, font=3)
### smaller italicized font for "meta-analytice estimate text"
op <- par(cex=1, font=3)
### fit fixed-effects model (use slab argument to define study labels)
res <- rma(yi=dat$yi, vi=dat$vi, data=dat, measure="COR", subset=(dat$study.type=="replication"),
slab=dat$study, method="FE")
### add summary estimate to the bottom
addpoly(res, row=12.5, cex=2, mlab="",efac=1.3, annotate = FALSE)
text(-1.09, 12.5, "Meta-analytic estimate of replications", pos=4)
### horizontal separation line
abline(h=13.25)
#original ES point estimate line
ablineclip(v=.5, y1=-2,y2=21, col="blue", lty="dashed", lwd=.5)
op <- par(cex=.75, font=1)
text(.17, 21.25, "original effect size point estimate", col="blue", pos=4)
abline(h=19.65, lty="solid", lwd=.25)
op <- par(cex=1, font=1)
text(.9,19, "signal - consistent", pos=4)
text(.9,18, "signal - inconsistent, larger", pos=4)
text(.9,17, "signal - inconsistent, smaller", pos=4)
text(.9,16, "signal - inconsistent, opposite", pos=4)
text(.9,15, "no signal - consistent", pos=4)
text(.9,14, "no signal - inconsistent", pos=4)
op <- par(cex=1, font=3)
text(.9,21.25, "Replication outcome", pos=4)
#dev.off()
### to save as png file
png(filename="rep.outcome.figure.png", res=95, width=1000, height=600, type="cairo")
dat <- read.csv(file = "rep-outcome-figure.csv", header = TRUE)
dat <- escalc(measure="COR", ri=dat$r, ni=dat$N, data=dat, slab=dat$study)
dat
### decrease margins so the full space is used
par(mar=c(4,4,1,2))
par(cex=1.25, font=1)
### set up forest plot (rows argument used to specify exactly in which rows outcomes will be plotted)
forest(dat$yi, dat$vi, xlim=c(-1.2,1.8), at=c(-.3,-.2,-.1,0,.1,.2,.3,.4,.5,.6,.7,.8,.9),
cex=1.25, ylim=c(12, 23), rows=c(20.25, 19:14), annotate=FALSE, cex.axis=1,
xlab="Effect size (r) [95% CI]", psize=1.25, pch=dat$study.symbol, steps=5)
op <- par(cex=1.25, font=3)
### smaller italicized font for "meta-analytice estimate text"
op <- par(cex=1, font=3)
### fit fixed-effects model (use slab argument to define study labels)
res <- rma(yi=dat$yi, vi=dat$vi, data=dat, measure="COR", subset=(dat$study.type=="replication"),
slab=dat$study, method="FE")
### add summary estimate to the bottom
addpoly(res, row=12.5, cex=2, mlab="",efac=1.3, annotate = FALSE)
text(-1.09, 12.5, "Meta-analytic estimate of replications", pos=4)
### horizontal separation line
abline(h=13.25)
#original ES point estimate line
ablineclip(v=.5, y1=-2,y2=21, col="blue", lty="dashed", lwd=.5)
op <- par(cex=.75, font=1)
text(.17, 21.25, "original effect size point estimate", col="blue", pos=4)
abline(h=19.65, lty="solid", lwd=.25)
op <- par(cex=1, font=1)
text(.9,19, "signal - consistent", pos=4)
text(.9,18, "signal - inconsistent, larger", pos=4)
text(.9,17, "signal - inconsistent, smaller", pos=4)
text(.9,16, "signal - inconsistent, opposite", pos=4)
text(.9,15, "no signal - consistent", pos=4)
text(.9,14, "no signal - inconsistent", pos=4)
op <- par(cex=1, font=3)
text(.9,21.25, "Replication outcome", pos=4)
dev.off()
library(metafor)
library(plotrix) #for ablineclip function
require(compute.es)
### to save as png file
png(filename="rep.outcome.figure.png", res=95, width=1000, height=600, type="cairo")
dat <- read.csv(file = "rep-outcome-figure.csv", header = TRUE)
dat <- escalc(measure="COR", ri=dat$r, ni=dat$N, data=dat, slab=dat$study)
dat
### decrease margins so the full space is used
par(mar=c(4,4,1,2))
par(cex=1.25, font=1)
### set up forest plot (rows argument used to specify exactly in which rows outcomes will be plotted)
forest(dat$yi, dat$vi, xlim=c(-1.2,1.8), at=c(-.3,-.2,-.1,0,.1,.2,.3,.4,.5,.6,.7,.8,.9),
cex=1.25, ylim=c(12, 21.5), rows=c(20.25, 19:14), annotate=FALSE, cex.axis=1,
xlab="Effect size (r) [95% CI]", psize=1.25, pch=dat$study.symbol, steps=5)
op <- par(cex=1.25, font=3)
### smaller italicized font for "meta-analytice estimate text"
op <- par(cex=1, font=3)
### fit fixed-effects model (use slab argument to define study labels)
res <- rma(yi=dat$yi, vi=dat$vi, data=dat, measure="COR", subset=(dat$study.type=="replication"),
slab=dat$study, method="FE")
### add summary estimate to the bottom
addpoly(res, row=12.5, cex=2, mlab="",efac=1.3, annotate = FALSE)
text(-1.09, 12.5, "Meta-analytic estimate of replications", pos=4)
### horizontal separation line
abline(h=13.25)
#original ES point estimate line
ablineclip(v=.5, y1=-2,y2=21, col="blue", lty="dashed", lwd=.5)
op <- par(cex=.75, font=1)
text(.17, 21.25, "original effect size point estimate", col="blue", pos=4)
abline(h=19.65, lty="solid", lwd=.25)
op <- par(cex=1, font=1)
text(.9,19, "signal - consistent", pos=4)
text(.9,18, "signal - inconsistent, larger", pos=4)
text(.9,17, "signal - inconsistent, smaller", pos=4)
text(.9,16, "signal - inconsistent, opposite", pos=4)
text(.9,15, "no signal - consistent", pos=4)
text(.9,14, "no signal - inconsistent", pos=4)
op <- par(cex=1, font=3)
text(.9,21.25, "Replication outcome", pos=4)
dev.off()
library(metafor)
library(plotrix) #for ablineclip function
require(compute.es)
### to save as png file
png(filename="rep.outcome.figure.png", res=95, width=1000, height=600, type="cairo")
dat <- read.csv(file = "rep-outcome-figure.csv", header = TRUE)
dat <- escalc(measure="COR", ri=dat$r, ni=dat$N, data=dat, slab=dat$study)
dat
### decrease margins so the full space is used
par(mar=c(4,4,1,2))
par(cex=1.25, font=1)
### set up forest plot (rows argument used to specify exactly in which rows outcomes will be plotted)
forest(dat$yi, dat$vi, xlim=c(-1.2,1.8), at=c(-.3,-.2,-.1,0,.1,.2,.3,.4,.5,.6,.7,.8,.9),
cex=1.25, ylim=c(12, 23), rows=c(20.25, 19:14), annotate=FALSE, cex.axis=1,
xlab="Effect size (r) [95% CI]", psize=1.25, pch=dat$study.symbol, steps=5)
op <- par(cex=1.25, font=3)
### smaller italicized font for "meta-analytice estimate text"
op <- par(cex=1, font=3)
### fit fixed-effects model (use slab argument to define study labels)
res <- rma(yi=dat$yi, vi=dat$vi, data=dat, measure="COR", subset=(dat$study.type=="replication"),
slab=dat$study, method="FE")
### add summary estimate to the bottom
addpoly(res, row=12.5, cex=2, mlab="",efac=1.3, annotate = FALSE)
text(-1.09, 12.5, "Meta-analytic estimate of replications", pos=4)
### horizontal separation line
abline(h=13.25)
#original ES point estimate line
ablineclip(v=.5, y1=-2,y2=21, col="blue", lty="dashed", lwd=.5)
op <- par(cex=.75, font=1)
text(.17, 21.25, "original effect size point estimate", col="blue", pos=4)
abline(h=19.65, lty="solid", lwd=.25)
op <- par(cex=1, font=1)
text(.9,19, "signal - consistent", pos=4)
text(.9,18, "signal - inconsistent, larger", pos=4)
text(.9,17, "signal - inconsistent, smaller", pos=4)
text(.9,16, "signal - inconsistent, opposite", pos=4)
text(.9,15, "no signal - consistent", pos=4)
text(.9,14, "no signal - inconsistent", pos=4)
op <- par(cex=1, font=3)
text(.9,21.25, "Replication outcome", pos=4)
dev.off()
library(metafor)
library(plotrix) #for ablineclip function
require(compute.es)
### to save as png file
png(filename="rep.outcome.figure.png", res=95, width=1000, height=500, type="cairo")
dat <- read.csv(file = "rep-outcome-figure.csv", header = TRUE)
dat <- escalc(measure="COR", ri=dat$r, ni=dat$N, data=dat, slab=dat$study)
dat
### decrease margins so the full space is used
par(mar=c(4,4,1,2))
par(cex=1.25, font=1)
### set up forest plot (rows argument used to specify exactly in which rows outcomes will be plotted)
forest(dat$yi, dat$vi, xlim=c(-1.2,1.8), at=c(-.3,-.2,-.1,0,.1,.2,.3,.4,.5,.6,.7,.8,.9),
cex=1.25, ylim=c(12, 23), rows=c(20.25, 19:14), annotate=FALSE, cex.axis=1,
xlab="Effect size (r) [95% CI]", psize=1.25, pch=dat$study.symbol, steps=5)
op <- par(cex=1.25, font=3)
### smaller italicized font for "meta-analytice estimate text"
op <- par(cex=1, font=3)
### fit fixed-effects model (use slab argument to define study labels)
res <- rma(yi=dat$yi, vi=dat$vi, data=dat, measure="COR", subset=(dat$study.type=="replication"),
slab=dat$study, method="FE")
### add summary estimate to the bottom
addpoly(res, row=12.5, cex=2, mlab="",efac=1.3, annotate = FALSE)
text(-1.09, 12.5, "Meta-analytic estimate of replications", pos=4)
### horizontal separation line
abline(h=13.25)
#original ES point estimate line
ablineclip(v=.5, y1=-2,y2=21, col="blue", lty="dashed", lwd=.5)
op <- par(cex=.75, font=1)
text(.17, 21.25, "original effect size point estimate", col="blue", pos=4)
abline(h=19.65, lty="solid", lwd=.25)
op <- par(cex=1, font=1)
text(.9,19, "signal - consistent", pos=4)
text(.9,18, "signal - inconsistent, larger", pos=4)
text(.9,17, "signal - inconsistent, smaller", pos=4)
text(.9,16, "signal - inconsistent, opposite", pos=4)
text(.9,15, "no signal - consistent", pos=4)
text(.9,14, "no signal - inconsistent", pos=4)
op <- par(cex=1, font=3)
text(.9,21.25, "Replication outcome", pos=4)
dev.off()
require(htmltools)
require(shiny) #required functions to source
#require(gsheet) #not currently required, but perhaps for multiple sheets
#All-replications HTML table functions
#remember to DELETE output.txt file before running function
PDF.HTML <- function(PDF.URL) {
if(toString(PDF.URL) != "NA") {
return(HTML(paste("<a href='",PDF.URL,"' target='_blank' class='sprite sprite-pdf-icon'></a>")))}
}
data.HTML <- function(data.URL) {
if (toString(data.URL) != "NA") {
return(HTML(paste("<a href='",data.URL,"' target='_blank' class='sprite sprite-data'></a>")))}
}
materials.HTML <- function(materials.URL) {
if (toString(materials.URL) != "NA") {
return(HTML(paste("<a href='",materials.URL,"' target='_blank' class='sprite sprite-materials'></a>")))}
}
prereg.HTML <- function(prereg.URL) {
if (toString(prereg.URL) != "NA") {
return(HTML(paste("<a href='",prereg.URL,"' target='_blank' class='sprite sprite-preregisteredplus'></a>")))}
}
EC.icon.HTML <- function(EC.URL) {
if (toString(EC.URL) != "NA") {
return(HTML(paste("<a href='",EC.URL,"' class='sprite sprite-ec-icon' title='Go to evidence collection this replication is part of'></a>")))}
}
NA.to.blank <- function (x) {
if (is.na(x)) {
return(replace(x,is.na(x),""))  }
else return(x)
}
#effect.title <- function (effect.description) {
#  if (effect.description!="") {
#    return(paste(" title='",effect.description,"'"))  } #on hold for now given DataTables ellipsis functions override <td> titles
#}
replication.HTML <- function(rep.num, rep.effort.type, orig.study.number, orig.effect.size, rep.effect.size,
rep.study.number, rep.outcome, target.effect, rep.num.in.set, discipline, rep.method.differences,
rep.active.sample.evidence, IVs, DVs, rep.type, other.outcomes, rep.open.data.URL,
rep.open.materials.URL, rep.pre.reg.URL, orig.study.article.URL,
rep.study.article.URL, orig.open.data.URL, orig.open.materials.URL,
orig.pre.reg.URL, effect.description, design, statistical.effect.type, orig.test.statistic,
orig.pvalue, orig.N, rep.N, rep.outcome.bayesian, study.order.CS, RPP.study.number,
orig.article.title,EC.URL) {
row.string <- tags$tr(tags$td(NA.to.blank(target.effect)),
tags$td(orig.study.number,PDF.HTML(orig.study.article.URL),
data.HTML(orig.open.data.URL),materials.HTML(orig.open.materials.URL),prereg.HTML(orig.pre.reg.URL)),
tags$td(orig.effect.size),
tags$td(rep.effect.size),
tags$td(rep.study.number,PDF.HTML(rep.study.article.URL),
data.HTML(rep.open.data.URL),materials.HTML(rep.open.materials.URL),
prereg.HTML(rep.pre.reg.URL),EC.icon.HTML(EC.URL)),
tags$td(NA.to.blank(rep.outcome)),
tags$td(NA.to.blank(IVs)),
tags$td(NA.to.blank(DVs)),
tags$td(NA.to.blank(rep.type)),
tags$td(NA.to.blank(rep.effort.type)),
tags$td(NA.to.blank(rep.method.differences)),
tags$td(NA.to.blank(rep.active.sample.evidence)),
tags$td(NA.to.blank(other.outcomes)),
tags$td(NA.to.blank(effect.description)))
cat(iconv(row.string, to="UTF-8"), file="output-all-replications.txt",append=TRUE) #needed to fix stupid Windows locale problem$@##@%!
}
gSheet.url <- 'https://docs.google.com/spreadsheets/d/e/2PACX-1vRdCTs0OOhcOI9LvmHkD4bXXm_kgxv7yq79VWtxwIgmwgi_LnK-2uWc-um_pfZBgbx2cWrNliMh9v7B/pub?output=csv'
run <- function() {
rep.table <- read.csv(url(gSheet.url), quote = "\"", stringsAsFactors=FALSE,encoding="UTF-8",na.strings="")
for (i in 1:nrow(rep.table)) {
#calling by header names so still works if column order changes in CSV file
replication.HTML(rep.num=rep.table[i,"rep.num"],
orig.study.number=rep.table[i,"original.study.number"],
orig.effect.size=rep.table[i,"original.effect.size"],
rep.effect.size=rep.table[i,"replication.effect.size"],
rep.study.number=rep.table[i,"replication.study.number"],
rep.outcome=rep.table[i,"rep.outcome"],
target.effect=rep.table[i,"target.effect"],
rep.effort.type=rep.table[i,"rep.effort.type"],
IVs=rep.table[i,"IVs"],
DVs=rep.table[i,"DVs"],
rep.type=rep.table[i,"rep.type"],
rep.method.differences=rep.table[i,"rep.method.differences"],
rep.active.sample.evidence=rep.table[i,"rep.active.sample.evidence"],
other.outcomes=rep.table[i,"other.outcomes"],
discipline=rep.table[i,"discipline"],
rep.num.in.set=rep.table[i,"rep.num.in.set"],
orig.study.article.URL=rep.table[i,"orig.study.article.URL"],
rep.study.article.URL=rep.table[i,"rep.study.article.URL"],
rep.open.data.URL=rep.table[i,"rep.open.data.URL"],
rep.open.materials.URL=rep.table[i,"rep.open.materials.URL"],
rep.pre.reg.URL=rep.table[i,"rep.pre.reg.URL"],
orig.open.data.URL=rep.table[i,"orig.open.data.URL"],
orig.open.materials.URL=rep.table[i,"orig.open.materials.URL"],
orig.pre.reg.URL=rep.table[i,"orig.pre.reg.URL"],
effect.description=rep.table[i,"effect.description"],
design=rep.table[i,"design"],
statistical.effect.type=rep.table[i,"statistical.effect.type"],
orig.test.statistic=rep.table[i,"orig.test.statistic"],
orig.pvalue=rep.table[i,"orig.pvalue"],
orig.N=rep.table[i,"orig.N"],
rep.N=rep.table[i,"rep.N"],
rep.outcome.bayesian=rep.table[i,"rep.outcome.bayesian"],
study.order.CS=rep.table[i,"study.order.CS"],
RPP.study.number=rep.table[i,"RPP.study.number"],
orig.article.title=rep.table[i,"orig.article.title"],
EC.URL=rep.table[i,"EC.URL"])
}
}
run()
setwd("C:/Users/Etienne/Google Drive/Curate Science/website/science-commons/curated")
require(htmltools)
require(shiny) #required functions to source
#require(gsheet) #not currently required, but perhaps for multiple sheets
#All-replications HTML table functions
#remember to DELETE output.txt file before running function
PDF.HTML <- function(PDF.URL) {
if(toString(PDF.URL) != "NA") {
return(HTML(paste("<a href='",PDF.URL,"' target='_blank' class='sprite sprite-pdf-icon'></a>")))}
}
data.HTML <- function(data.URL) {
if (toString(data.URL) != "NA") {
return(HTML(paste("<a href='",data.URL,"' target='_blank' class='sprite sprite-data'></a>")))}
}
materials.HTML <- function(materials.URL) {
if (toString(materials.URL) != "NA") {
return(HTML(paste("<a href='",materials.URL,"' target='_blank' class='sprite sprite-materials'></a>")))}
}
prereg.HTML <- function(prereg.URL) {
if (toString(prereg.URL) != "NA") {
return(HTML(paste("<a href='",prereg.URL,"' target='_blank' class='sprite sprite-preregisteredplus'></a>")))}
}
EC.icon.HTML <- function(EC.URL) {
if (toString(EC.URL) != "NA") {
return(HTML(paste("<a href='",EC.URL,"' class='sprite sprite-ec-icon' title='Go to evidence collection this replication is part of'></a>")))}
}
NA.to.blank <- function (x) {
if (is.na(x)) {
return(replace(x,is.na(x),""))  }
else return(x)
}
#effect.title <- function (effect.description) {
#  if (effect.description!="") {
#    return(paste(" title='",effect.description,"'"))  } #on hold for now given DataTables ellipsis functions override <td> titles
#}
replication.HTML <- function(rep.num, rep.effort.type, orig.study.number, orig.effect.size, rep.effect.size,
rep.study.number, rep.outcome, target.effect, rep.num.in.set, discipline, rep.method.differences,
rep.active.sample.evidence, IVs, DVs, rep.type, other.outcomes, rep.open.data.URL,
rep.open.materials.URL, rep.pre.reg.URL, orig.study.article.URL,
rep.study.article.URL, orig.open.data.URL, orig.open.materials.URL,
orig.pre.reg.URL, effect.description, design, statistical.effect.type, orig.test.statistic,
orig.pvalue, orig.N, rep.N, rep.outcome.bayesian, study.order.CS, RPP.study.number,
orig.article.title,EC.URL) {
row.string <- tags$tr(tags$td(NA.to.blank(target.effect)),
tags$td(orig.study.number,PDF.HTML(orig.study.article.URL),
data.HTML(orig.open.data.URL),materials.HTML(orig.open.materials.URL),prereg.HTML(orig.pre.reg.URL)),
tags$td(orig.effect.size),
tags$td(rep.effect.size),
tags$td(rep.study.number,PDF.HTML(rep.study.article.URL),
data.HTML(rep.open.data.URL),materials.HTML(rep.open.materials.URL),
prereg.HTML(rep.pre.reg.URL),EC.icon.HTML(EC.URL)),
tags$td(NA.to.blank(rep.outcome)),
tags$td(NA.to.blank(IVs)),
tags$td(NA.to.blank(DVs)),
tags$td(NA.to.blank(rep.type)),
tags$td(NA.to.blank(rep.effort.type)),
tags$td(NA.to.blank(rep.method.differences)),
tags$td(NA.to.blank(rep.active.sample.evidence)),
tags$td(NA.to.blank(other.outcomes)),
tags$td(NA.to.blank(effect.description)))
cat(iconv(row.string, to="UTF-8"), file="output-all-replications.txt",append=TRUE) #needed to fix stupid Windows locale problem$@##@%!
}
gSheet.url <- 'https://docs.google.com/spreadsheets/d/e/2PACX-1vRdCTs0OOhcOI9LvmHkD4bXXm_kgxv7yq79VWtxwIgmwgi_LnK-2uWc-um_pfZBgbx2cWrNliMh9v7B/pub?output=csv'
run <- function() {
rep.table <- read.csv(url(gSheet.url), quote = "\"", stringsAsFactors=FALSE,encoding="UTF-8",na.strings="")
for (i in 1:nrow(rep.table)) {
#calling by header names so still works if column order changes in CSV file
replication.HTML(rep.num=rep.table[i,"rep.num"],
orig.study.number=rep.table[i,"original.study.number"],
orig.effect.size=rep.table[i,"original.effect.size"],
rep.effect.size=rep.table[i,"replication.effect.size"],
rep.study.number=rep.table[i,"replication.study.number"],
rep.outcome=rep.table[i,"rep.outcome"],
target.effect=rep.table[i,"target.effect"],
rep.effort.type=rep.table[i,"rep.effort.type"],
IVs=rep.table[i,"IVs"],
DVs=rep.table[i,"DVs"],
rep.type=rep.table[i,"rep.type"],
rep.method.differences=rep.table[i,"rep.method.differences"],
rep.active.sample.evidence=rep.table[i,"rep.active.sample.evidence"],
other.outcomes=rep.table[i,"other.outcomes"],
discipline=rep.table[i,"discipline"],
rep.num.in.set=rep.table[i,"rep.num.in.set"],
orig.study.article.URL=rep.table[i,"orig.study.article.URL"],
rep.study.article.URL=rep.table[i,"rep.study.article.URL"],
rep.open.data.URL=rep.table[i,"rep.open.data.URL"],
rep.open.materials.URL=rep.table[i,"rep.open.materials.URL"],
rep.pre.reg.URL=rep.table[i,"rep.pre.reg.URL"],
orig.open.data.URL=rep.table[i,"orig.open.data.URL"],
orig.open.materials.URL=rep.table[i,"orig.open.materials.URL"],
orig.pre.reg.URL=rep.table[i,"orig.pre.reg.URL"],
effect.description=rep.table[i,"effect.description"],
design=rep.table[i,"design"],
statistical.effect.type=rep.table[i,"statistical.effect.type"],
orig.test.statistic=rep.table[i,"orig.test.statistic"],
orig.pvalue=rep.table[i,"orig.pvalue"],
orig.N=rep.table[i,"orig.N"],
rep.N=rep.table[i,"rep.N"],
rep.outcome.bayesian=rep.table[i,"rep.outcome.bayesian"],
study.order.CS=rep.table[i,"study.order.CS"],
RPP.study.number=rep.table[i,"RPP.study.number"],
orig.article.title=rep.table[i,"orig.article.title"],
EC.URL=rep.table[i,"EC.URL"])
}
}
run()
setwd("C:/Users/Etienne/Google Drive/Curate Science/website/science-commons/curated")
require(htmltools)
require(shiny) #required functions to source
#require(gsheet) #not currently required, but perhaps for multiple sheets
#All-replications HTML table functions
#remember to DELETE output.txt file before running function
PDF.HTML <- function(PDF.URL) {
if(toString(PDF.URL) != "NA") {
return(HTML(paste("<a href='",PDF.URL,"' target='_blank' class='sprite sprite-pdf-icon'></a>")))}
}
data.HTML <- function(data.URL) {
if (toString(data.URL) != "NA") {
return(HTML(paste("<a href='",data.URL,"' target='_blank' class='sprite sprite-data'></a>")))}
}
materials.HTML <- function(materials.URL) {
if (toString(materials.URL) != "NA") {
return(HTML(paste("<a href='",materials.URL,"' target='_blank' class='sprite sprite-materials'></a>")))}
}
prereg.HTML <- function(prereg.URL) {
if (toString(prereg.URL) != "NA") {
return(HTML(paste("<a href='",prereg.URL,"' target='_blank' class='sprite sprite-preregisteredplus'></a>")))}
}
EC.icon.HTML <- function(EC.URL) {
if (toString(EC.URL) != "NA") {
return(HTML(paste("<a href='",EC.URL,"' class='sprite sprite-ec-icon' title='Go to evidence collection this replication is part of'></a>")))}
}
NA.to.blank <- function (x) {
if (is.na(x)) {
return(replace(x,is.na(x),""))  }
else return(x)
}
#effect.title <- function (effect.description) {
#  if (effect.description!="") {
#    return(paste(" title='",effect.description,"'"))  } #on hold for now given DataTables ellipsis functions override <td> titles
#}
replication.HTML <- function(rep.num, rep.effort.type, orig.study.number, orig.effect.size, rep.effect.size,
rep.study.number, rep.outcome, target.effect, rep.num.in.set, discipline, rep.method.differences,
rep.active.sample.evidence, IVs, DVs, rep.type, other.outcomes, rep.open.data.URL,
rep.open.materials.URL, rep.pre.reg.URL, orig.study.article.URL,
rep.study.article.URL, orig.open.data.URL, orig.open.materials.URL,
orig.pre.reg.URL, effect.description, design, statistical.effect.type, orig.test.statistic,
orig.pvalue, orig.N, rep.N, rep.outcome.bayesian, study.order.CS, RPP.study.number,
orig.article.title,EC.URL) {
row.string <- tags$tr(tags$td(NA.to.blank(target.effect)),
tags$td(orig.study.number,PDF.HTML(orig.study.article.URL),
data.HTML(orig.open.data.URL),materials.HTML(orig.open.materials.URL),prereg.HTML(orig.pre.reg.URL)),
tags$td(orig.effect.size),
tags$td(rep.effect.size),
tags$td(rep.study.number,PDF.HTML(rep.study.article.URL),
data.HTML(rep.open.data.URL),materials.HTML(rep.open.materials.URL),
prereg.HTML(rep.pre.reg.URL),EC.icon.HTML(EC.URL)),
tags$td(NA.to.blank(rep.outcome)),
tags$td(NA.to.blank(IVs)),
tags$td(NA.to.blank(DVs)),
tags$td(NA.to.blank(rep.type)),
tags$td(NA.to.blank(rep.effort.type)),
tags$td(NA.to.blank(rep.method.differences)),
tags$td(NA.to.blank(rep.active.sample.evidence)),
tags$td(NA.to.blank(other.outcomes)),
tags$td(NA.to.blank(effect.description)))
cat(iconv(row.string, to="UTF-8"), file="output-all-replications.txt",append=TRUE) #needed to fix stupid Windows locale problem$@##@%!
}
gSheet.url <- 'https://docs.google.com/spreadsheets/d/e/2PACX-1vRdCTs0OOhcOI9LvmHkD4bXXm_kgxv7yq79VWtxwIgmwgi_LnK-2uWc-um_pfZBgbx2cWrNliMh9v7B/pub?output=csv'
run <- function() {
rep.table <- read.csv(url(gSheet.url), quote = "\"", stringsAsFactors=FALSE,encoding="UTF-8",na.strings="")
for (i in 1:nrow(rep.table)) {
#calling by header names so still works if column order changes in CSV file
replication.HTML(rep.num=rep.table[i,"rep.num"],
orig.study.number=rep.table[i,"original.study.number"],
orig.effect.size=rep.table[i,"original.effect.size"],
rep.effect.size=rep.table[i,"replication.effect.size"],
rep.study.number=rep.table[i,"replication.study.number"],
rep.outcome=rep.table[i,"rep.outcome"],
target.effect=rep.table[i,"target.effect"],
rep.effort.type=rep.table[i,"rep.effort.type"],
IVs=rep.table[i,"IVs"],
DVs=rep.table[i,"DVs"],
rep.type=rep.table[i,"rep.type"],
rep.method.differences=rep.table[i,"rep.method.differences"],
rep.active.sample.evidence=rep.table[i,"rep.active.sample.evidence"],
other.outcomes=rep.table[i,"other.outcomes"],
discipline=rep.table[i,"discipline"],
rep.num.in.set=rep.table[i,"rep.num.in.set"],
orig.study.article.URL=rep.table[i,"orig.study.article.URL"],
rep.study.article.URL=rep.table[i,"rep.study.article.URL"],
rep.open.data.URL=rep.table[i,"rep.open.data.URL"],
rep.open.materials.URL=rep.table[i,"rep.open.materials.URL"],
rep.pre.reg.URL=rep.table[i,"rep.pre.reg.URL"],
orig.open.data.URL=rep.table[i,"orig.open.data.URL"],
orig.open.materials.URL=rep.table[i,"orig.open.materials.URL"],
orig.pre.reg.URL=rep.table[i,"orig.pre.reg.URL"],
effect.description=rep.table[i,"effect.description"],
design=rep.table[i,"design"],
statistical.effect.type=rep.table[i,"statistical.effect.type"],
orig.test.statistic=rep.table[i,"orig.test.statistic"],
orig.pvalue=rep.table[i,"orig.pvalue"],
orig.N=rep.table[i,"orig.N"],
rep.N=rep.table[i,"rep.N"],
rep.outcome.bayesian=rep.table[i,"rep.outcome.bayesian"],
study.order.CS=rep.table[i,"study.order.CS"],
RPP.study.number=rep.table[i,"RPP.study.number"],
orig.article.title=rep.table[i,"orig.article.title"],
EC.URL=rep.table[i,"EC.URL"])
}
}
run()
