rep.num.in.set=NA.to.blank(rep.table[i,"rep.num.in.set"]),
orig.study.article.URL=rep.table[i,"orig.study.article.URL"],
rep.study.article.URL=rep.table[i,"rep.study.article.URL"],
rep.open.data.URL=rep.table[i,"rep.open.data.URL"],
rep.open.materials.URL=rep.table[i,"rep.open.materials.URL"],
rep.pre.reg.URL=rep.table[i,"rep.pre.reg.URL"],
orig.open.data.URL=rep.table[i,"orig.open.data.URL"],
orig.open.materials.URL=rep.table[i,"orig.open.materials.URL"],
orig.pre.reg.URL=rep.table[i,"orig.pre.reg.URL"],
effect.description=NA.to.blank(rep.table[i,"effect.description"]),
design=NA.to.blank(rep.table[i,"design"]),
statistical.effect.type=NA.to.blank(rep.table[i,"statistical.effect.type"]),
orig.test.statistic=NA.to.blank(rep.table[i,"orig.test.statistic"]),
orig.pvalue=NA.to.blank(rep.table[i,"orig.pvalue"]),
rep.outcome.bayesian=NA.to.blank(rep.table[i,"rep.outcome.bayesian"]),
study.order.CS=NA.to.blank(rep.table[i,"study.order.CS"]),
RPP.study.number=NA.to.blank(rep.table[i,"RPP.study.number"]),
orig.article.title=NA.to.blank(rep.table[i,"orig.article.title"]),
EC.URL=rep.table[i,"EC.URL"],
ES.description=NA.to.blank(rep.table[i,"ES.description"]),
include.in.HTML.table=rep.table[i,"include.in.HTML.table"])
}
}
run()
require(htmltools)
require(shiny) #required functions to source
#require(gsheet) #not currently required, but perhaps for multiple sheets
#All-replications HTML table functions
#remember to DELETE output.txt file before running function
PDF.HTML <- function(PDF.URL) {
if(toString(PDF.URL) != "NA") {
return(HTML(paste("<a href='",PDF.URL,"' target='_blank' class='sprite sprite-pdf-icon'></a>")))}
}
data.HTML <- function(data.URL) {
if (toString(data.URL) != "NA") {
return(HTML(paste("<a href='",data.URL,"' target='_blank' class='sprite sprite-data'></a>")))}
}
materials.HTML <- function(materials.URL) {
if (toString(materials.URL) != "NA") {
return(HTML(paste("<a href='",materials.URL,"' target='_blank' class='sprite sprite-materials'></a>")))}
}
prereg.HTML <- function(prereg.URL) {
if (toString(prereg.URL) != "NA") {
return(HTML(paste("<a href='",prereg.URL,"' target='_blank' class='sprite sprite-preregisteredplus'></a>")))}
}
EC.icon.HTML <- function(EC.URL) {
if (toString(EC.URL) != "NA") {
return(HTML(paste("<a href='",EC.URL,"' class='sprite sprite-ec-icon' title='Go to evidence collection this replication is part of'></a>")))}
}
NA.to.blank <- function (x) {
if (is.na(x)) {
return(replace(x,is.na(x),""))  }
else return(x)
}
concat.ES.CI <- function (ES.type, ES.value, ES.CI) {
if (ES.CI!="") {
if (substr(ES.CI,1,1)=="[") {
return( paste(ES.type, "=", ES.value, ES.CI)) } #an extra space somehow being added bet. ES. value & ES.CI so removed , "" ,
else {
return( paste(ES.type, "=", ES.value, "Â±", ES.CI))  }
}
if (ES.CI=="") {
return( paste(ES.type, "=", ES.value))  }
}
#add ES.description title to original and replication ES cells (assumes same ES.description for both orig & rep)
td.custom.title <- function (x,ES.description) {
if (ES.description!="") {
return(HTML(paste("<td title='",ES.description,"'>",x,"</td>")))  }
else
{ return(HTML(paste("<td>",x,"</td>"))) } #or could use shiny's tags$td fxn
}
td.rep.outcome.title <- function (x) {
if (substring(x,1,19)=="signal - consistent") {
return(HTML(paste("<td title='replication ES 95% CI excludes 0 and includes original ES point estimate'>",x,"</td>")))  }
else if (substring(x,1,21)=="signal - inconsistent") {
if (substring(x,1,30)=="signal - inconsistent, smaller"){
return(HTML(paste("<td title='replication ES 95% CI excludes 0 but also excludes original ES point estimate (smaller, same-direction)'>",x,"</td>")))  }
else if (substring(x,1,29)=="signal - inconsistent, larger"){
return(HTML(paste("<td title='replication ES 95% CI excludes 0 but also excludes original ES point estimate (larger, same-direction)'>",x,"</td>")))  }
else if (substring(x,1,31)=="signal - inconsistent, opposite"){
return(HTML(paste("<td title='replication ES 95% CI excludes 0 but also excludes original ES point estimate (opposite direction/pattern)'>",x,"</td>")))  }
else {
return(HTML(paste("<td title='replication ES 95% CI excludes 0 but also excludes original ES point estimate'>",x,"</td>")))  }
}
else if (substring(x,1,22)=="no signal - consistent"){
return(HTML(paste("<td title='replication ES 95% CI includes 0 but also includes original ES point estimate'>",x,"</td>")))  }
else if (substring(x,1,24)=="no signal - inconsistent"){
return(HTML(paste("<td title='replication ES 95% CI includes 0 but excludes original ES point estimate'>",x,"</td>")))  }
else {
if (substring(x,1,6)=="signal"){
return(HTML(paste("<td title='replication ES 95% CI excludes 0'>",x,"</td>")))  }
else if (substring(x,1,9)=="no signal"){
return(HTML(paste("<td title='replication ES 95% CI includes 0'>",x,"</td>")))  }
else {
return(HTML(paste("<td>",x,"</td>"))) } #or could use shiny's tags$td fxn }
}
}
#effect.title <- function (effect.description) {
#  if (effect.description!="") {
#    return(paste(" title='",effect.description,"'")) } #on hold for now given DataTables ellipsis functions override <td> titles (use td.custom.title fxn above)
#}
replication.HTML <- function(rep.num, rep.effort.type, orig.study.number, orig.N, orig.ES.type, orig.ES, orig.ES.CI,
rep.N, rep.ES.type, rep.ES, rep.ES.CI, rep.study.number, rep.outcome, target.effect,
rep.num.in.set, discipline, rep.method.differences, rep.active.sample.evidence, IVs, DVs,
rep.type, other.outcomes, rep.open.data.URL, rep.open.materials.URL, rep.pre.reg.URL,
orig.study.article.URL, rep.study.article.URL, orig.open.data.URL, orig.open.materials.URL,
orig.pre.reg.URL, effect.description, design, statistical.effect.type, orig.test.statistic,
orig.pvalue, rep.outcome.bayesian, study.order.CS, RPP.study.number, orig.article.title,EC.URL,
orig.study.pub.year, ES.description, include.in.HTML.table) {
#include only most precise replications among large-scale rep efforts (to declutter table and improve performance/loading time)
if (include.in.HTML.table=="yes") {
row.string <- tags$tr(tags$td(NA.to.blank(target.effect)),
tags$td(orig.study.number,PDF.HTML(orig.study.article.URL),
data.HTML(orig.open.data.URL),materials.HTML(orig.open.materials.URL),prereg.HTML(orig.pre.reg.URL)),
tags$td(orig.N),
td.custom.title(concat.ES.CI(orig.ES.type, orig.ES, orig.ES.CI),ES.description),
tags$td(rep.N),
td.custom.title(concat.ES.CI(rep.ES.type, rep.ES, rep.ES.CI),ES.description),
tags$td(rep.study.number,PDF.HTML(rep.study.article.URL),
data.HTML(rep.open.data.URL),materials.HTML(rep.open.materials.URL),
prereg.HTML(rep.pre.reg.URL),EC.icon.HTML(EC.URL)),
td.rep.outcome.title(rep.outcome),
tags$td(IVs),
tags$td(DVs),
tags$td(rep.type),
tags$td(rep.effort.type),
tags$td(rep.method.differences),
tags$td(rep.active.sample.evidence),
tags$td(other.outcomes),
tags$td(effect.description))
cat(iconv(row.string, to="UTF-8"), file="output-all-replications.txt",append=TRUE) #needed to fix stupid Windows locale problem$@##@%!
}
}
replication.HTML.reduced.columns <- function(rep.num, rep.effort.type, orig.study.number, orig.N, orig.ES.type, orig.ES, orig.ES.CI,
rep.N, rep.ES.type, rep.ES, rep.ES.CI, rep.study.number, rep.outcome, target.effect,
rep.num.in.set, discipline, rep.method.differences, rep.active.sample.evidence, IVs, DVs,
rep.type, other.outcomes, rep.open.data.URL, rep.open.materials.URL, rep.pre.reg.URL,
orig.study.article.URL, rep.study.article.URL, orig.open.data.URL, orig.open.materials.URL,
orig.pre.reg.URL, effect.description, design, statistical.effect.type, orig.test.statistic,
orig.pvalue, rep.outcome.bayesian, study.order.CS, RPP.study.number, orig.article.title,EC.URL,
orig.study.pub.year, ES.description, include.in.HTML.table) {
row.string <- tags$tr(tags$td(rep.study.number,PDF.HTML(rep.study.article.URL),
data.HTML(rep.open.data.URL),materials.HTML(rep.open.materials.URL),
prereg.HTML(rep.pre.reg.URL),EC.icon.HTML(EC.URL)),
tags$td(orig.study.number,PDF.HTML(orig.study.article.URL),
data.HTML(orig.open.data.URL),materials.HTML(orig.open.materials.URL),
prereg.HTML(orig.pre.reg.URL)),
tags$td(rep.type),
tags$td(NA.to.blank(target.effect)),
tags$td(rep.effort.type))
cat(iconv(row.string, to="UTF-8"), file="output-all-replications-reduced-columns.txt",append=TRUE) #needed to fix stupid Windows locale problem$@##@%!
}
gSheet.url <- 'https://docs.google.com/spreadsheets/d/e/2PACX-1vRdCTs0OOhcOI9LvmHkD4bXXm_kgxv7yq79VWtxwIgmwgi_LnK-2uWc-um_pfZBgbx2cWrNliMh9v7B/pub?output=csv'
run <- function() {
rep.table <- read.csv(url(gSheet.url), quote = "\"", stringsAsFactors=FALSE,encoding="UTF-8",na.strings="")
for (i in 1:nrow(rep.table)) {
#calling by header names so still works if column order changes in CSV file
replication.HTML.reduced.columns(rep.num=rep.table[i,"rep.num"],
orig.study.number=rep.table[i,"orig.study.number"],
orig.study.pub.year=rep.table[i,"orig.study.pub.year"],
orig.N=NA.to.blank(rep.table[i,"orig.N"]),
orig.ES.type=NA.to.blank(rep.table[i,"orig.ES.type"]),
orig.ES=NA.to.blank(rep.table[i,"orig.ES"]),
orig.ES.CI=NA.to.blank(rep.table[i,"orig.ES.CI"]),
rep.N=NA.to.blank(rep.table[i,"rep.N"]),
rep.ES.type=NA.to.blank(rep.table[i,"rep.ES.type"]),
rep.ES=NA.to.blank(rep.table[i,"rep.ES"]),
rep.ES.CI=NA.to.blank(rep.table[i,"rep.ES.CI"]),
rep.study.number=rep.table[i,"rep.study.number"],
rep.outcome=NA.to.blank(rep.table[i,"rep.outcome"]),
target.effect=rep.table[i,"target.effect"],
rep.effort.type=rep.table[i,"rep.effort.type"],
IVs=NA.to.blank(rep.table[i,"IVs"]),
DVs=NA.to.blank(rep.table[i,"DVs"]),
rep.type=NA.to.blank(rep.table[i,"rep.type"]),
rep.method.differences=NA.to.blank(rep.table[i,"rep.method.differences"]),
rep.active.sample.evidence=NA.to.blank(rep.table[i,"rep.active.sample.evidence"]),
other.outcomes=NA.to.blank(rep.table[i,"other.outcomes"]),
discipline=NA.to.blank(rep.table[i,"discipline"]),
rep.num.in.set=NA.to.blank(rep.table[i,"rep.num.in.set"]),
orig.study.article.URL=rep.table[i,"orig.study.article.URL"],
rep.study.article.URL=rep.table[i,"rep.study.article.URL"],
rep.open.data.URL=rep.table[i,"rep.open.data.URL"],
rep.open.materials.URL=rep.table[i,"rep.open.materials.URL"],
rep.pre.reg.URL=rep.table[i,"rep.pre.reg.URL"],
orig.open.data.URL=rep.table[i,"orig.open.data.URL"],
orig.open.materials.URL=rep.table[i,"orig.open.materials.URL"],
orig.pre.reg.URL=rep.table[i,"orig.pre.reg.URL"],
effect.description=NA.to.blank(rep.table[i,"effect.description"]),
design=NA.to.blank(rep.table[i,"design"]),
statistical.effect.type=NA.to.blank(rep.table[i,"statistical.effect.type"]),
orig.test.statistic=NA.to.blank(rep.table[i,"orig.test.statistic"]),
orig.pvalue=NA.to.blank(rep.table[i,"orig.pvalue"]),
rep.outcome.bayesian=NA.to.blank(rep.table[i,"rep.outcome.bayesian"]),
study.order.CS=NA.to.blank(rep.table[i,"study.order.CS"]),
RPP.study.number=NA.to.blank(rep.table[i,"RPP.study.number"]),
orig.article.title=NA.to.blank(rep.table[i,"orig.article.title"]),
EC.URL=rep.table[i,"EC.URL"],
ES.description=NA.to.blank(rep.table[i,"ES.description"]),
include.in.HTML.table=rep.table[i,"include.in.HTML.table"])
}
}
run()
run()
setwd("C:/Users/Etienne LeBel/Google Drive/Curate Science/website/science-commons/curated")
run()
rep.table <- read.csv(url(gSheet.url), quote = "\"", stringsAsFactors=FALSE,encoding="UTF-8",na.strings="")
#calling by header names so still works if column order changes in CSV file
replication.HTML.reduced.columns(rep.num=rep.table[i,"rep.num"],
orig.study.number=rep.table[i,"orig.study.number"],
orig.study.pub.year=rep.table[i,"orig.study.pub.year"],
orig.N=NA.to.blank(rep.table[i,"orig.N"]),
orig.ES.type=NA.to.blank(rep.table[i,"orig.ES.type"]),
orig.ES=NA.to.blank(rep.table[i,"orig.ES"]),
orig.ES.CI=NA.to.blank(rep.table[i,"orig.ES.CI"]),
rep.N=NA.to.blank(rep.table[i,"rep.N"]),
rep.ES.type=NA.to.blank(rep.table[i,"rep.ES.type"]),
rep.ES=NA.to.blank(rep.table[i,"rep.ES"]),
rep.ES.CI=NA.to.blank(rep.table[i,"rep.ES.CI"]),
rep.study.number=rep.table[i,"rep.study.number"],
rep.outcome=NA.to.blank(rep.table[i,"rep.outcome"]),
target.effect=rep.table[i,"target.effect"],
rep.effort.type=rep.table[i,"rep.effort.type"],
IVs=NA.to.blank(rep.table[i,"IVs"]),
DVs=NA.to.blank(rep.table[i,"DVs"]),
rep.type=NA.to.blank(rep.table[i,"rep.type"]),
rep.method.differences=NA.to.blank(rep.table[i,"rep.method.differences"]),
rep.active.sample.evidence=NA.to.blank(rep.table[i,"rep.active.sample.evidence"]),
other.outcomes=NA.to.blank(rep.table[i,"other.outcomes"]),
discipline=NA.to.blank(rep.table[i,"discipline"]),
rep.num.in.set=NA.to.blank(rep.table[i,"rep.num.in.set"]),
orig.study.article.URL=rep.table[i,"orig.study.article.URL"],
rep.study.article.URL=rep.table[i,"rep.study.article.URL"],
rep.open.data.URL=rep.table[i,"rep.open.data.URL"],
rep.open.materials.URL=rep.table[i,"rep.open.materials.URL"],
rep.pre.reg.URL=rep.table[i,"rep.pre.reg.URL"],
orig.open.data.URL=rep.table[i,"orig.open.data.URL"],
orig.open.materials.URL=rep.table[i,"orig.open.materials.URL"],
orig.pre.reg.URL=rep.table[i,"orig.pre.reg.URL"],
effect.description=NA.to.blank(rep.table[i,"effect.description"]),
design=NA.to.blank(rep.table[i,"design"]),
statistical.effect.type=NA.to.blank(rep.table[i,"statistical.effect.type"]),
orig.test.statistic=NA.to.blank(rep.table[i,"orig.test.statistic"]),
orig.pvalue=NA.to.blank(rep.table[i,"orig.pvalue"]),
rep.outcome.bayesian=NA.to.blank(rep.table[i,"rep.outcome.bayesian"]),
study.order.CS=NA.to.blank(rep.table[i,"study.order.CS"]),
RPP.study.number=NA.to.blank(rep.table[i,"RPP.study.number"]),
orig.article.title=NA.to.blank(rep.table[i,"orig.article.title"]),
EC.URL=rep.table[i,"EC.URL"],
ES.description=NA.to.blank(rep.table[i,"ES.description"]),
include.in.HTML.table=rep.table[i,"include.in.HTML.table"])
i=1
#calling by header names so still works if column order changes in CSV file
replication.HTML.reduced.columns(rep.num=rep.table[i,"rep.num"],
orig.study.number=rep.table[i,"orig.study.number"],
orig.study.pub.year=rep.table[i,"orig.study.pub.year"],
orig.N=NA.to.blank(rep.table[i,"orig.N"]),
orig.ES.type=NA.to.blank(rep.table[i,"orig.ES.type"]),
orig.ES=NA.to.blank(rep.table[i,"orig.ES"]),
orig.ES.CI=NA.to.blank(rep.table[i,"orig.ES.CI"]),
rep.N=NA.to.blank(rep.table[i,"rep.N"]),
rep.ES.type=NA.to.blank(rep.table[i,"rep.ES.type"]),
rep.ES=NA.to.blank(rep.table[i,"rep.ES"]),
rep.ES.CI=NA.to.blank(rep.table[i,"rep.ES.CI"]),
rep.study.number=rep.table[i,"rep.study.number"],
rep.outcome=NA.to.blank(rep.table[i,"rep.outcome"]),
target.effect=rep.table[i,"target.effect"],
rep.effort.type=rep.table[i,"rep.effort.type"],
IVs=NA.to.blank(rep.table[i,"IVs"]),
DVs=NA.to.blank(rep.table[i,"DVs"]),
rep.type=NA.to.blank(rep.table[i,"rep.type"]),
rep.method.differences=NA.to.blank(rep.table[i,"rep.method.differences"]),
rep.active.sample.evidence=NA.to.blank(rep.table[i,"rep.active.sample.evidence"]),
other.outcomes=NA.to.blank(rep.table[i,"other.outcomes"]),
discipline=NA.to.blank(rep.table[i,"discipline"]),
rep.num.in.set=NA.to.blank(rep.table[i,"rep.num.in.set"]),
orig.study.article.URL=rep.table[i,"orig.study.article.URL"],
rep.study.article.URL=rep.table[i,"rep.study.article.URL"],
rep.open.data.URL=rep.table[i,"rep.open.data.URL"],
rep.open.materials.URL=rep.table[i,"rep.open.materials.URL"],
rep.pre.reg.URL=rep.table[i,"rep.pre.reg.URL"],
orig.open.data.URL=rep.table[i,"orig.open.data.URL"],
orig.open.materials.URL=rep.table[i,"orig.open.materials.URL"],
orig.pre.reg.URL=rep.table[i,"orig.pre.reg.URL"],
effect.description=NA.to.blank(rep.table[i,"effect.description"]),
design=NA.to.blank(rep.table[i,"design"]),
statistical.effect.type=NA.to.blank(rep.table[i,"statistical.effect.type"]),
orig.test.statistic=NA.to.blank(rep.table[i,"orig.test.statistic"]),
orig.pvalue=NA.to.blank(rep.table[i,"orig.pvalue"]),
rep.outcome.bayesian=NA.to.blank(rep.table[i,"rep.outcome.bayesian"]),
study.order.CS=NA.to.blank(rep.table[i,"study.order.CS"]),
RPP.study.number=NA.to.blank(rep.table[i,"RPP.study.number"]),
orig.article.title=NA.to.blank(rep.table[i,"orig.article.title"]),
EC.URL=rep.table[i,"EC.URL"],
ES.description=NA.to.blank(rep.table[i,"ES.description"]),
include.in.HTML.table=rep.table[i,"include.in.HTML.table"])
View(rep.table)
require(htmltools)
require(shiny) #required functions to source
#remember to DELETE output.txt file before running function
article.title.TD <- function(article.title, article.PDF.URL,
open.mat.URL, prereg.URL, open.data.URL, open.code.URL,
code.ocean.URL, reporting.type, disclosure.URL,
disclosure.date, discl.exclusions, discl.conditions, discl.DVs,
discl.sample.size, discl.analyses, discl.other.studies, discl.others, rr,
article.preprint.URL, article.HTML.URL, article.type, rep.num) {
return(HTML(paste0("<td>",article.title, " ", PDF.HTML(article.PDF.URL), RR.label(rr, prereg.URL),
preprint.label(article.preprint.URL),
article.HTML.label(article.HTML.URL), rep.label(article.type, rep.num), "<br>",
disclosure.HTML(reporting.type, disclosure.URL, disclosure.date,
discl.exclusions, discl.conditions, discl.DVs,
discl.sample.size, discl.analyses, discl.other.studies, discl.others),
materials.HTML(open.mat.URL),
prereg.HTML(rr, prereg.URL),
data.HTML(open.data.URL),
code.HTML(open.code.URL),
code.ocean.HTML(code.ocean.URL),
"</td>")))
}
basic4.at.subm.HTML <- "<div style='display:inline;' class='popUpOnHover'>
<img src='logos/sprite-icons/disclosure-available.png' class='shrunk-16 transparent'>
<span class='toDisplayBasic4Submission popUpStyle' style='padding-left:5px;white-space:nowrap;'>
<span style='font-size:14px;font-weight:bold;color:gray;'>Study complies with the
<a href='https://www.psychologicalscience.org/publications/psychological_science/ps-submissions#DISC' target='_blank'>
Basic 4 (at submission)</a> <img src='logos/sprite-icons/disclosure-available.png' class='shrunk-16 transparent'> reporting standard:</span>
<ol style='margin-top:5px;margin-bottom:5px;'>
<li><strong>Excluded data (subjects/observations):</strong> Full details reported in article.</li>
<li><strong>Experimental conditions:</strong> Full details reported in article.</li>
<li><strong>Outcome measures:</strong> Full details reported in article.</li>
<li><strong>Sample size determination:</strong> Full details reported in article.</li>
</ol>
</span>
</div>"
disclosure.HTML <- function(reporting.type, disclosure.URL, disclosure.date,
discl.exclusions, discl.conditions, discl.DVs,
discl.sample.size, discl.analyses, discl.other.studies, discl.others) {
if(toString(reporting.type) == "basic4.at.subm") {
return(HTML(basic4.at.subm.HTML))}
else if (toString(reporting.type) == "basic4.retro") {
return()
}
else if (toString(reporting.type) == "basic7.retro") {
return()
}
else {
return(HTML(" <a title='Compliance to reporting standard information is not available'>
<img src='logos/sprite-icons/disclosure-unavailable.png' class='shrunk-16'></a>"))
}
}
materials.HTML <- function(open.mat.URL) {
if (toString(open.mat.URL) != "NA") {
return(HTML(paste0(" <a href='",open.mat.URL,"' target='_blank' title='Go to study materials files'>
<img src='logos/sprite-icons/materials-available.png' class='shrunk-16 transparent'></a> "))) }
else {
return(HTML(" <a title='Open study materials information is not available'>
<img src='logos/sprite-icons/materials-unavailable.png' class='shrunk-16'></a> "))
}
}
prereg.HTML <- function(rr, prereg.URL)
{ if (toString(rr) != "NA") #is an RR
{ if (toString(prereg.URL) != "NA") #is an RR *and* pre-reg protocol available
{ return(HTML(paste0(" <a href='",prereg.URL,"' target='_blank'
title='Go to Registered Report preregistered study protocol'>
<img src='logos/sprite-icons/preregistered-plus-available.png' class='shrunk-16 transparent'></a> ")))
}
else #RR, but pre-reg protocol unavailable
{ return(HTML(" <a title='Registered Report preregistered study protocol not (yet) publicly available'>
<img src='logos/sprite-icons/preregistered-plus-available.png' class='shrunk-16 transparent'></a> "))
}
}
else #not an RR
{ if (toString(prereg.URL) != "NA") #not an RR, but pre-registered
{ return(HTML(paste0(" <a href='",prereg.URL,"' target='_blank' title='Go to preregistered study protocol'>
<img src='logos/sprite-icons/preregistered-available.png' class='shrunk-16 transparent'></a> ")))
}
else  #not an RR, nor pre-registered
{ return(HTML(" <a title='Preregistration information is not available'>
<img src='logos/sprite-icons/preregistered-unavailable.png' class='shrunk-16'></a> "))
}
}
}
data.HTML <- function(open.data.URL) {
if (toString(open.data.URL) != "NA") {
return(HTML(paste0(" <a href='",open.data.URL,"' target='_blank' title='Go to data files'>
<img src='logos/sprite-icons/data-available.png' class='shrunk-16 transparent'></a> ")))}
else {
return(HTML(" <a title='Open data information is not available'>
<img src='logos/sprite-icons/data-unavailable.png' class='shrunk-16'></a> "))
}
}
code.HTML <- function(open.code.URL) {
if (toString(open.code.URL) != "NA") {
return(HTML(paste0(" <a href='",open.code.URL,"' target='_blank' title='Go to reproducible code files'>
<img src='logos/sprite-icons/reproducible-code.png' class='shrunk-16 transparent'></a> ")))}
}
code.ocean.HTML <- function(code.ocean.URL) {
if (toString(code.ocean.URL) != "NA") {
return(HTML(paste0(" <a href='",code.ocean.URL,"' target='_blank' title='Go to computational container'>
<img src='logos/sprite-icons/code-ocean.png' class='shrunk-16 transparent'></a> ")))}
}
PDF.HTML <- function(PDF.URL) {
if(toString(PDF.URL) != "NA") {
return(HTML(paste0(" <a href='",PDF.URL,"' target='_blank'>
<img src='logos/sprite-icons/pdf.png' class='shrunk-14 transparent'></a> ")))}
}
EC.icon.HTML <- function(EC.URL) {
if (toString(EC.URL) != "NA") {
return(HTML(paste0("<a href='",EC.URL,"' title='Go to replication collection this replication is part of'>
<img src='logos/sprite-icons/collection.png' class='shrunk-16 transparent'></a>")))}
}
rep.label <- function(article.type, rep.num) {
if(toString(article.type) == "rep") {
return(HTML(paste0(" <span class='label label-info-brown'
title='This article reports replications.'>Replication <span class='badge badge-repnum'>",
rep.num, "</span></span> ")))}
}
preprint.label <- function(article.preprint.URL) {
if(toString(article.preprint.URL) != "NA") {
return(HTML(paste0("<span class='label label-info-purple'><a href='",article.preprint.URL,"' target='_blank'
class='black' title='View preprint of this article.'>Preprint</a></span> ")))}
}
article.HTML.label <- function(article.HTML.URL) {
if(toString(article.HTML.URL) != "NA") {
return(HTML(paste0("<span class='label label-default'><a href='",article.HTML.URL,"' target='_blank'
class='black' title='View interactive HTML version of this article.'>HTML</a></span> ")))}
}
RR.label <- function(rr, prereg.URL) {
if(toString(rr) != "NA") {
if (toString(prereg.URL) != "NA")
{ return(HTML(paste0("<span class='label label-info-red'><a href='",prereg.URL,"' target='_blank'
class='black' title='Go to Registered Report preregistered study protocol.'>Registered Report</a></span> ")))}
else
{ return(HTML("<span class='label label-info-red'
title='Registered Report preregistered study protocol not (yet) publicly available.'>Registered Report</span> "))}
}
}
DOI.HTML <- function(DOI) {
if(toString(DOI) != "NA") {
return(HTML(paste0("<a href='https://dx.doi.org/", DOI,"' target='_blank' class='doi-dimmed grey'>",DOI,"</a>")))} #still not trimming correctly but link still works
}
journal.name.HTML <- function(journal.name) {
return(HTML(paste0("<i>",journal.name,"</i>")))
}
NA.to.blank <- function (x) {
if (is.na(x)) {
return(replace(x,is.na(x),""))  }
else return(x)
}
article.HTML <- function(authors.pub.year, article.title, journal.name, DOI, article.PDF.URL,
article.preprint.URL, article.HTML.URL, open.mat.URL, prereg.URL,
open.data.URL, open.code.URL, code.ocean.URL, reporting.type, disclosure.URL,
disclosure.date, discl.exclusions, discl.conditions, discl.DVs,
discl.sample.size, discl.analyses, discl.other.studies, discl.others,
rs, om, prereg, od, rc, article.type, rr, rep.num) {
row.string <- tags$tr(tags$td(authors.pub.year),
article.title.TD(article.title, article.PDF.URL,
open.mat.URL, prereg.URL, open.data.URL, open.code.URL,
code.ocean.URL, reporting.type, disclosure.URL,
disclosure.date, discl.exclusions, discl.conditions, discl.DVs,
discl.sample.size, discl.analyses, discl.other.studies, discl.others, rr,
article.preprint.URL, article.HTML.URL, article.type, rep.num),
tags$td(journal.name.HTML(journal.name)),
tags$td(DOI.HTML(DOI)),
tags$td(NA.to.blank(rs)),
tags$td(NA.to.blank(om)),
tags$td(NA.to.blank(prereg)),
tags$td(NA.to.blank(od)),
tags$td(NA.to.blank(rc)),
tags$td(NA.to.blank(article.type)),
tags$td(NA.to.blank(rr)))
cat(iconv(row.string, to="UTF-8"), file="output-all-articles.txt",append=TRUE) #needed to fix stupid Windows locale problem$@##@%!
}
gSheet.url <- 'https://docs.google.com/spreadsheets/d/e/2PACX-1vRdCTs0OOhcOI9LvmHkD4bXXm_kgxv7yq79VWtxwIgmwgi_LnK-2uWc-um_pfZBgbx2cWrNliMh9v7B/pub?gid=354006826&single=true&output=csv'
run <- function() {
article.table <- read.csv(url(gSheet.url), quote = "\"", stringsAsFactors=FALSE,encoding="UTF-8",na.strings="")
for (i in 1:nrow(article.table)) {
#for (i in 28:52) {
#calling by header names so still works if column order changes in CSV file
article.HTML(authors.pub.year = article.table[i,"authors.pub.year"],
article.title = article.table[i,"article.title"],
journal.name = article.table[i,"journal.name"],
DOI = article.table[i,"DOI"],
article.PDF.URL = article.table[i,"article.PDF.URL"],
article.preprint.URL = article.table[i,"article.preprint.URL"],
article.HTML.URL = article.table[i,"article.HTML.URL"],
open.mat.URL = article.table[i,"open.mat.URL"],
prereg.URL = article.table[i,"prereg.URL"],
open.data.URL = article.table[i,"open.data.URL"],
open.code.URL = article.table[i,"open.code.URL"],
code.ocean.URL = article.table[i,"code.ocean.URL"],
reporting.type = article.table[i,"reporting.type"],
disclosure.URL = article.table[i,"disclosure.URL"],
disclosure.date = article.table[i,"disclosure.date"],
discl.exclusions = article.table[i,"discl.exclusions"],
discl.conditions = article.table[i,"discl.conditions"],
discl.DVs = article.table[i,"discl.DVs"],
discl.sample.size = article.table[i,"discl.sample.size"],
discl.analyses = article.table[i,"discl.analyses"],
discl.other.studies = article.table[i,"discl.other.studies"],
discl.others = article.table[i,"discl.others"],
rs = article.table[i,"rs"],
om = article.table[i,"om"],
prereg = article.table[i,"prereg"],
od = article.table[i,"od"],
rc = article.table[i,"rc"],
article.type = article.table[i,"article.type"],
rr = article.table[i,"rr"],
rep.num = article.table[i,"rep.num"])
}
}
run()
run()
